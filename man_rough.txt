man_DSA.txt
===========

what's map reduce  algorithm. map and reduce in context of parallel programming
lock free data structures ?? in research. very difficult to find a perfectly lock free data structure.
                                          use existing implementations


study median of medians algorithm and k selection algorithm
use quick select algorithm. its O(n)
http://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html

good read about min heap, insertion, extraction
http://cs.stackexchange.com/questions/524/does-there-exist-a-priority-queue-with-o1-extracts

BFS v DFS

BFS is guaranteed to find a solution and the shortest path if it exists.
DFS may / may not get into a inf loop or a redundant loop (with depth limits)
DFS takes less memory

coupon collector problem ??


man_DD.txt
==========

page fault:
pre-req: http://duartes.org/gustavo/blog/post/how-the-kernel-manages-your-memory
when a process tries to access a address that lies in a valid vma_struct but doesnt have a page frame assigned to it yet
in the page table, its detected first by the MMU, cuz its not able to find a physical mapping to this virtual address
the MMU siganls the processor at do_page_fault(). the function has to find out
which process sent the page fault: by accessing current
which address was faulted by reading hardware register by calling read_cr2()


allocating memory in kernel ?
better allocate all needed memory right in the beginning, so that
we may do 3 mallocs and do some work1 and then do another malloc which fails, we now have to undo work1 and
free the previous 3 mallocs.

kmalloc(), _get_free_pages() and alloc_pages() - the deal, who calls who:
kmalloc calls _get_free_pages calls alloc_pages
kmalloc and _get_free_pages returns a virtual address
    hence GFP_HIGHMEM cannot be used with these functions. HIGHMEM are not mapped physical to virtual
    GFP_HIGHMEM can be used with alloc_pages() though, it will return a struct page which will have virtual = NULL
alloc_pages returns the address of the first struct page allocated

HIGHMEM:
highmem is not by default mapped (not given a virtual address in its page struct)
if we alloc_pages using GFP_HIGHMEM, we should do kmap() on it to actually map it to virtual memory
now HIGHMEM are always mapper between 3GB and 4GB mark of virtual address space. meaning
kmap on a HIGHMEM always returns an address between 3GB and 4GB. Hence it just a 1GB (or 128MB ??) limit onto
which we can map a high memory. Hence we should always free a highmem allocation when not needed.
what happens when we kmap a low memory allocated address ? it simply returns the virtual address from the struct page.

kmalloc allocs from a slab layer of pages already allocated using _get_free_pages
when this slab layer is full, kmalloc calls _get_free_pages to allocate in more pages into its slab layer
is this slab layer the kmem_cache ?? is this called the slab layer at all ??
this is the reason kfree needs only a pointer, while
free_pages (opposite of _get_free_pages) and _free_pages (opposite of alloc_pages) also needs the order number of pages to free
vmalloc also allocates from a similar pool but just that it calls _get_free_pages many times in small small amounts to satisfy
a physically discontiguous range of allocated virtual address space

highly frequest allocations and deallocations:
things like inode / task_struct are so frequently allocated and deallocated that going down to
_get_free_pages or alloc_pages everytime may result in huge fragmentations. so maintain preallocated slabs
also called caches to grabbing releasing such structures. kmalloc itself is built on top of such a slab allocator.
caches: (represented by struct kmem_cache) they typically maintain 3 slabs. empty, partial and full.
a grab is always made from a partial slab till its full then it switches to a empty slab making it partial and
creating an extra empty slab for later use.
new slabs are obviously created using _get_free_pages and friends
a new cache is created as follows:
struct kmem_cache * kmem_cache_create(name, size, ..); // its also called a slab allocator
a new object is grabbed from the cache using kmem_cache_alloc // this is what kmalloc calls internally

physical address, logical address, virtual address
physical and virtual is okay. where does logical address fit in ??
_get_free_pages returns logical address
kmalloc returns the virtual address
alloc_pages returns the struct page pointer (which is virtual in itself) and the virtual member variable contains the
virtual address for this physical page. how do we get the physical address from this page struct ??

TLB and page tables:
who does the memory translation TLB or Page Tables. Both. TLB is just a cache for the page table translations
where does TLB stay and where does Page Tables stay. TLB is a hardware cache for the MMU to do fast virtual to physical lookups


every process stack has a corresponding kernel stack ?? reserved for when system calls are made ??
the EIP keeps switching between the kernel stack and the process stack across system calls ??
if per process:
when is the kernel stack created at process creation time or after the first system call is made.
if not per process:
is it a pool precreated as a set for future use. is a kernel stack shared or reused among processes ??
how many kernel stacks in general (or how many contexts)
    Robert Love: Memory management chapter:
    =======================================
Statically allocating on the stack:
    The size of the per process kernel stack depends on both the architecture and a compile time option
    Historically the kernel stack has been two pages per process. This is usually 8KB for 32 bit archs and 16KB for 64 bit archs
    because they usually have 4KB and 8KB pages respectively.
Single page kernel stacks:
    Early in 2.6 kernels, an option was introduced to move to single page kernel stacks (4KB on 32 bits and 8KB on 64 bits).
    why: cuz with high uptime it gets more difficult to allocate two physically contiguous unallocated pages. And
    the resulting VM pressure from allocating a single new process is expensive
    There is one more copmlication. Each process's entire call chain has to fit in its kernel stack.
    Historically however interrupt handlers also used the kernel of the process they interrupted, thus they too had to fit.
    This was efficient and simple, but it placed even tighter constraints on the already meager kernel stack.
    When the stack moved to only a single page, interrupt handlers could no longer fit,
    To rectify this problem, kernel developers implemented a new feature: interrupt stacks. Interrupt stacks provide a
    single 'per processor' (not per process) used for interrupt handlers. With this option interrupt handlers no longer
    share the kernel stack of the interrupted process. Instead they use their own stacks. This consumes only a single page per processor.
    [sup: so interrupt stacks are different from process stacks, so the process resuming is no more a problem]
    unbounded recursion and allocs() are obviously not allowed (?? what are these) 
    stack overflows are silent and dangerous. there is no protection in the kernel





AWESOME readings on kernel bootup
http://www.tldp.org/LDP/khg/HyperNews/get/tour/tour.html <-+- pretty much covers every theoretical topic
http://www.tldp.org/LDP/khg/HyperNews/get/ <---------------+- parent to above
http://flint.cs.yale.edu/feng/research/BIOS/procModes.htm

how to add a new system call:
http://www.csee.umbc.edu/courses/undergraduate/CMSC421/fall02/burt/projects/howto_add_systemcall.html

Early debugging in the kernel:
http://nothingtechnicalaboutit.blogspot.com/2012/02/linux-early-boot-debug.html
Go to "Kernel Hacking". Enable "Kernel Debugging".
This will unhide lots of options, including "Kernel low-level Debugging functions".
Enabling that will unhide "Early printk". Enable "Early printk" too.


RISC Processor architecture: (as opposed to CISC) 
concept: simplified (as opposed to complex) instructions can provide higher performance if
this simplicity enables much faster execution of each instruction
RISC doesnt mean a smaller instruction set.
PowerPC (RISC) have instruction sets as large as the IBM CISC.

The term "reduced" means that the amount of work any single instruction accomplishes is reduced.
At most a single data memory cycleâ€”compared to the "complex instructions" of CISC CPUs that may require
dozens of data memory cycles to execute a single instruction.
In particular, RISC processors typically have separate instructions for I/O and data processing
http://cs.stanford.edu/people/eroberts/courses/soco/projects/risc/whatis/index.html
one cycle Clock Per Instruction (CPI).
pipelining ??
Stanford's RISC --> MIPS  architecture
Berkeley's RISC --> SPARC architecture


mode switch details (system calls) from ZADOK:
calls to a different address space
kernel has to verify safety of system call arguments
how: shared memory, network pipe/socket. disk file (slowest), cpu registers (fastest)
# load cpu registers with system call number and arguments
# send a interrupt to kernel (eg. int 0x80 (80h) from old days) --> user program gets suspended
# kernel received an interrupt (trap), run interrupt handler (isr)
# save the context for the user program to resume and send it to WAIT state, using task struct
# retrieve syscall number and args from registers
# find syscall entry point from syscall table
# create a stack frame before creating the actual system call routine in the kernel (done in asm code)
  the return address of this stack frame is the scheduler and not the isr.
# jump to start addr of syscall (found from the syscall table ??)
# when returning, scheduler is invoked and prog moved to READY state.
# scheduler will pick program some time later, and run it
  return val is stored into another register that user+kernel agree on
# Now back at user program. now it has to take the return values of the system call
# store return val into variable in user context
# resume execution of user program
open() is actually a stub which does all the clerical stuff before calling an 0x80
Also a syscall can be called directly as: syscall(SYSCALLNUM, args)
on architectures that dont have enough registers, use main memory to pass args to syscall



before interview:
LRU Cache
linked list reversal, recursive and iterative
linked list deletion, recursive and iterative
longest running subsequence with max sum
implement malloc free wrapper
quick sort, merge sort
how is a system call made (mode switch)



man_hmm.txt
===========
rope in college students, frustrated engineers at service companies

online food delivery: pickup and packing from home. inspired from dabbawala
                      remote place pickup reachability (small towns, greater cities) is most important
		             local youngsters may be employed. uniforms,
			                                       internet devices (multi-sim),
							       take photo
							       measure temperature
							       print order / route, barcode sticker
							       transport vehicle (bikes, cars, if needed, for girls),
							       cell phones
			     (a typical scenario:

			      I place a pickup booking at 9AM: Please pickup food from my home address at 10AM.
			      order details: tentative quantity, hot or cold storage requirements
			                     expected size / weight / number of containers if known
					     dry / oily / liquid / hot / cold
					     packaging / storage to be provided by service ?
			                     delivery speed requested: 6 hrs, 12 hrs, 1 day, 2 days (charged accordingly)
			      
			      a local pickup boy checks all the pickup orders in his area by 9:30 AM,
			      plans his pickup route according to local convenience. Each pickup may not be delayed
			      for more than half n hour than what is ordered, if delay is expected, pickup boy has to inform
			      at the pickup address (by phone) and person who placed the order.

			      at the pickup address, food is ready. pickup boy is courteous and friendly.
			      checks the food, quantity, matches with order details
			      takes photo, measures temperature, prints receipt and barcode sticker
			      packs the food in front of the people at home, leaves. places food in hot / cold storage

			      uses local transport to travel. updates order status at each bus stop.
			      updates with bus stop name, transit name, flight number, train name, etc, etc.
			      these details are prelocaded in the system. the system is intelligent enough to provide with
			      all possible options so that the pickup boy can simply select. (this part is difficult)
			      accumulates all orders and transports to local delivery office in that area)

                      start with one small town with most middle class families like calcutta, bhubaneshwar, chennai
		      tie ups with major courier networks at high charges
		      publicity over facebook / social networks.
		      online pickup booking, cash on pickup / cash on delivery / online payment
		      online and GPS tracking has to be at even more granularity, bus stop to bus stop granularity
		                                                                  initially manually
                      pickup / delivery timings has to be perfectly synchronized and relaxed with local transport timings.
		      pre-decided pickup timeslots on each location,
		      say breakfast (7AM, 10AM), lunch (12PM, 2PM) and dinner (6PM, 10PM)
		      getting late than  promised is not allowed.

		      revenue: charges on order
		               ads on package
			       ads on pickup boy tshirt
			       targeted ads on website

drone aeronautics. pizza delivery, amazon delivery
                   multiple mobile networks connectivity
                   guided travel, self travel combination (licensed).
		   night vision ?? terrain aware self landing ??
		   light weight play toys (unlicensed).
		   easy navigation like google earth
		   recovery, solar power, self destroy
		   security ?? drone tracking, owner tracking
		   inter drone communication, collision avoidance

Apps for drones: Create a framework for apps creation on drone softwares.
                 needs capital

university connect for alumni. main motive: financial contribution and accountability and progress tracking
                               entry fee for alumni. students can lookup and request, needs permission / position / verification
			       prestige factor, feel good in contributions
			       2 alumni representative to overlook operations for a month or two


Facebok mask productivity tool: Block / mask / overlay specific portions of facebook. I dont want to see the names of my friends. i just want the stories. That too related to my set of interests.
                                I dont want to see ads also. Mouseovers on ads should not trigger browser events.

3.5mm Wireless headphone: That jacks into a 3.5mm port and works via it (instead of via bluetooth or wifi, etc). The 3.5mm jacks just plugs in and works
                          Challenges related to powering the transmitter receiver on the jack mostly.
			  Can android phones be software tweaked to transfer power to the 3.5mm headphone jack ? I think it can be done
	      

